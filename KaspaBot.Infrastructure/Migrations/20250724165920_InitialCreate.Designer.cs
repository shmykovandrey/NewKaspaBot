// <auto-generated />
using System;
using KaspaBot.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KaspaBot.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250724165920_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("KaspaBot.Domain.Entities.OrderPair", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OrderPairs");
                });

            modelBuilder.Entity("KaspaBot.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KaspaBot.Domain.Entities.OrderPair", b =>
                {
                    b.OwnsOne("KaspaBot.Domain.Entities.Order", "BuyOrder", b1 =>
                        {
                            b1.Property<string>("OrderPairId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Commission")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<decimal?>("Price")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("QuantityFilled")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("QuoteQuantityFilled")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Side")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Status")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Type")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrderPairId");

                            b1.ToTable("OrderPairs");

                            b1.WithOwner()
                                .HasForeignKey("OrderPairId");
                        });

                    b.OwnsOne("KaspaBot.Domain.Entities.Order", "SellOrder", b1 =>
                        {
                            b1.Property<string>("OrderPairId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Commission")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<decimal?>("Price")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("QuantityFilled")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("QuoteQuantityFilled")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Side")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Status")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Type")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrderPairId");

                            b1.ToTable("OrderPairs");

                            b1.WithOwner()
                                .HasForeignKey("OrderPairId");
                        });

                    b.Navigation("BuyOrder")
                        .IsRequired();

                    b.Navigation("SellOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("KaspaBot.Domain.Entities.User", b =>
                {
                    b.OwnsOne("KaspaBot.Domain.ValueObjects.UserApiCredentials", "ApiCredentials", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ApiKey")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("ApiSecret")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("KaspaBot.Domain.ValueObjects.UserSettings", "Settings", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("EnableAutoTrading")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Settings_EnableAutoTrading");

                            b1.Property<decimal>("MaxUsdtUsing")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("OrderAmount")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("PercentPriceChange")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("PercentProfit")
                                .HasColumnType("TEXT");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ApiCredentials")
                        .IsRequired();

                    b.Navigation("Settings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

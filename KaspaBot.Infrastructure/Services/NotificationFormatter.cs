using System;
using System.Collections.Generic;
using System.Text;
using System.Linq; // Added for .Any() and .Max()

namespace KaspaBot.Infrastructure.Services
{
    public static class NotificationFormatter
    {
        public static string Profit(decimal qty, decimal price, decimal usdt, decimal profit)
        {
            return $"<b>‚úÖ –ü–†–û–î–ê–ù–û</b>\n" +
                   $"{qty:F2} KAS –ø–æ {price:F6} USDT\n\n" +
                   "<b>üí∞ –ü–æ–ª—É—á–µ–Ω–æ</b>\n" +
                   $"{usdt:F8} USDT\n\n" +
                   "<b>üìà –ü–†–ò–ë–´–õ–¨</b>\n" +
                   $"{profit:F8} USDT";
        }

        public static string AutoBuy(decimal buyQty, decimal buyPrice, decimal sellQty, decimal sellPrice, decimal? lastBuyPrice = null, decimal? currentPrice = null, bool isStartup = false)
        {
            string header;
            if (lastBuyPrice != null && currentPrice != null && buyPrice < lastBuyPrice)
            {
                var percentDrop = 100m * (lastBuyPrice.Value - buyPrice) / lastBuyPrice.Value;
                header = $"<b>–¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ {percentDrop:F2}%: {lastBuyPrice:F6} ‚Üí {buyPrice:F6} USDT</b>";
            }
            else if (isStartup && lastBuyPrice == null)
            {
                header = "<b>üöÄ –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏</b>";
            }
            else
            {
                header = "<b>–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞</b>";
            }

            return $"{header}\n\n" +
                   $"‚úÖ <b>–ö–£–ü–õ–ï–ù–û</b>\n" +
                   $"üìä <b>{buyQty:F2} KAS</b> –ø–æ <b>{buyPrice:F6} USDT</b>\n\n" +
                   $"üí∞ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> <b>{(buyQty * buyPrice):F8} USDT</b>\n\n" +
                   $"üìà <b>–í–´–°–¢–ê–í–õ–ï–ù–û</b>\n" +
                   $"üìä <b>{sellQty:F2} KAS</b> –ø–æ <b>{sellPrice:F6} USDT</b>";
        }

        public static string StatTable(
            IEnumerable<(int Index, decimal Qty, decimal Price, decimal Sum, decimal Deviation)> rows,
            decimal totalSum,
            decimal currentPrice,
            string autotradeStatus,
            string autoBuyInfo,
            int totalCount)
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine($"<b>{autotradeStatus}</b>");
            sb.AppendLine("<b>üöÄ –û—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É</b>");
            sb.AppendLine($"üìä <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤:</b> {totalCount}");
            sb.AppendLine($"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤:</b> {totalSum:F2}");
            sb.AppendLine();
            sb.AppendLine("<pre>");
            sb.AppendLine(" # | –ö–æ–ª-–≤–æ |  –¶–µ–Ω–∞  | –°—É–º–º–∞ | –û—Ç–∫–ª–æ–Ω");
            sb.AppendLine("---|--------|--------|-------|--------");
            foreach (var row in rows)
            {
                sb.AppendLine($"{row.Index,2} | {row.Qty,6:F2} | {row.Price,6:F4} | {row.Sum,5:F2} | {row.Deviation,5:F2}%");
            }
            sb.AppendLine("</pre>");
            sb.AppendLine($"\nüíµ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {currentPrice:F4}{autoBuyInfo}");
            return sb.ToString();
        }

        public static string ProfitTable(
            IEnumerable<(string Date, decimal Profit, int Count)> rows,
            decimal weekProfit,
            int weekCount,
            decimal allProfit,
            int allCount)
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine("<b>üìà –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç</b>\n");
            sb.AppendLine("<pre>");
            var dateHeaders = new[] { "–î–∞—Ç–∞", "–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è" };
            int maxDateLen = rows.Any()
                ? Math.Max(rows.Max(r => r.Date.Length), dateHeaders.Max(h => h.Length))
                : dateHeaders.Max(h => h.Length);
            string dateFmt = $"{{0,-{maxDateLen}}}";
            sb.AppendLine($"{string.Format(dateFmt, "–î–∞—Ç–∞")} | –ü—Ä–æ—Ñ–∏—Ç | –°–¥–µ–ª");
            sb.AppendLine(new string('-', maxDateLen) + "|--------|------");
            foreach (var row in rows)
            {
                sb.AppendLine($"{string.Format(dateFmt, row.Date)} | {row.Profit,6:F2} | {row.Count,4}");
            }
            sb.AppendLine(new string('-', maxDateLen) + "|--------|------");
            sb.AppendLine($"{string.Format(dateFmt, "–ó–∞ –Ω–µ–¥–µ–ª—é")} | {weekProfit,6:F2} | {weekCount,4}");
            sb.AppendLine($"{string.Format(dateFmt, "–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è")} | {allProfit,6:F2} | {allCount,4}");
            sb.AppendLine("</pre>");
            return sb.ToString();
        }

        public static string BalanceTable(IEnumerable<(string Asset, decimal Total, decimal Available, decimal Frozen, decimal? UsdtValue)> rows, decimal totalUsdt)
        {
            var sb = new System.Text.StringBuilder();
            foreach (var row in rows)
            {
                sb.AppendLine($"<b>–ë–∞–ª–∞–Ω—Å {row.Asset}:</b>");
                sb.AppendLine($"Total: <b>{row.Total:F2}</b> Free:<b>{row.Available:F2}</b> Locked:<b>{row.Frozen:F2}</b>");
                sb.AppendLine();
            }
            sb.AppendLine("================================================");
            sb.AppendLine($"<b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤ USDT –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ KAS=0.096872:</b>");
            sb.AppendLine($"Total: <b>{totalUsdt:F2}</b> Free:<b>{rows.Where(r => r.Asset == "USDT").Sum(r => r.Available):F2}</b> Locked:<b>{rows.Where(r => r.Asset == "USDT").Sum(r => r.Frozen):F2}</b>");
            return sb.ToString();
        }
    }
} 